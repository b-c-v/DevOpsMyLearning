# fastcgi_cache configures a caching mechanism in Nginx that helps improve performance by storing FastCGI responses

# prepare environment with command: 'docker compose up -f 12_docker-compose.yaml -d'

# using the URL http://localhost/12_date.php will display information about the current date and time. However, it will show the same values for up to 60 minutes, as the data is written to the cache and retained for that duration

# If run the command 'docker container exec -it nginx-apache2-tools-1 ab -n 200 -c 200 http://test-nginx-1:80/12_date.php' for the first time, Nginx processes each request for the PHP file (12_date.php) by passing it to the FastCGI backend (php-fpm:9000).    Since the cache is empty initially, Nginx fetches the response from the backend, which takes 10 seconds because the PHP script is pausing (<?php sleep(10); ?>).     The result of the PHP processing is then stored in the FastCGI cache (ZONE_1) for subsequent requests.
# If the command is run a second time, the response time will drop significantly, as it no longer depends on PHP execution. The responses are served from the FastCGI cache. After the first request is cached, subsequent requests to 12_date.php will not invoke the PHP backend. Instead, Nginx will serve the cached response instantly, bypassing the sleep(10) function entirely.
events {
}

http {

    include mime.types;

    # Configure the FastCGI cache:
    # - store cache files in /tmp/cache_nginx
    # - use a hierarchical directory structure with levels=1:2:1
    # - allocate a memory zone named 'ZONE_1' with a maximum size of 100 MB
    # - cache inactive items for 60 minutes
    # - limit the total cache size to 2 MB
    fastcgi_cache_path /tmp/cache_nginx levels=1:2:1 keys_zone=ZONE_1:100m inactive=60m max_size=2m;

    # Define a key to identify cached requests using a combination of:
    # - Scheme (http or https), request method (GET, POST), host, and URI.
    fastcgi_cache_key "$scheme$request_method$host$request_uri";

    # Add a custom header to responses to indicate cache status (HIT, MISS, etc.).
    add_header X-Cache $upstream_cache_status;

    server {
        listen 80;
        server_name localhost;
        root /var/www/html/;

        index index.php index.html;

        location / {
            try_files $uri $uri/ =404;
        }
        location ~ \.php$ {
            # Include default FastCGI parameters for PHP processing.
            include fastcgi_params;
            # Pass PHP requests to a FastCGI process listening on php-fpm:9000
            fastcgi_pass php-fpm:9000;
            # Define the default file for PHP processing (index.php)
            fastcgi_index index.php;
            # Specify the script filename for PHP processing
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            # Enable FastCGI caching using the 'ZONE_1' cache zone.
            fastcgi_cache ZONE_1;
            # Cache successful (HTTP 200) responses for 60 minutes.
            fastcgi_cache_valid 200 60m;
        }
    }
}

