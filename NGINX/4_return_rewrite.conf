# return is used for simple, static responses (status codes, messages, or redirects). It does not involve complex URL rewriting. When a page changes its URL, but it is necessary to keep the ability to use the old URL. Commonly used to send clients a redirect response (301, 302 etc.)

# rewrite is used when need to modify the URL requested by a client and redirect them to a new location or to control the flow of request processing based on specific conditions. Can rewrite the URL internally and does not notify the client (no 301,302).

# docker container  run --name mynginx -v ./bloggingtemplate:/usr/share/nginx/html -v ./4_return_rewrite.conf:/etc/nginx/nginx.conf  -d -p 80:80 nginx:1.27.0

events {
}

http {

    include mime.types;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html/;

        #  any URL starting with /guest/ followed by a word character will be rewritten to /welcome
        rewrite ^/guest/\w+ /welcome;

        # captures any word following /user/ and stores it in a variable $1. This allows to dynamically redirect requests to /welcome/ followed by the captured word.
        # For example, if a user accesses /user/sergii, the rewrite rule transforms this request to /welcome/sergii. If the link /welcome/andrea is used, it will match the /welcome location block and redirect to the image.
        rewrite ^/user/(\w+) /welcome/$1;

        # any request to /welcome will return a 301 redirect to the image
        location /welcome {
            return 301 /assets/images/about/welcome-banner.jpg;
        }

        # if the URL is exactly /welcome/sergii, it will return a 200 status with a specific message.
        location /welcome/sergii {
            return 200 "You can see this text because you used the link /user/sergii, which was rewritten to /welcome/sergii";
        }

    }
}

