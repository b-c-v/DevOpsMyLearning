events {
}

http {
    # types - maps file name extensions to MIME types of responses. Extensions are case-insensitive. Several extensions can be mapped to one type
    types {
        # curl -I http://localhost:1986/assets/js/bootstrap.min.js sends a HEAD request to the URL and retrieves the HTTP headers without downloading the entire content of the file. In field Content-Type: can check that the media type of the resource is correct
        text/html html;
        text/css css;
    }
    # Instead of hardcoding each content type, use the mime.types file, which defines mappings between file extensions and their respective MIME types. The types{} context is no longer needed.
    # Includes another file, or files matching the specified mask, into configuration. Included files should consist of syntactically correct directives and blocks
    include mime.types;

    server {
        listen 80;
        # server_name directive to determine which server block should handle a given request. If a client makes a request with the Host header set to localhost, this server block will handle the request.
        server_name localhost;
        #  root directory for serving files. When a client makes a request to the server, Nginx will look for the requested files starting from this root directory. If a client requests / it will look for /tmp/bloggingtemplate/index.html by default.
        # If no index.html is found, Nginx will return a 403 Forbidden error (if the directory is readable but the file doesn't exist) or 404 Not Found (if the directory is inaccessible or does not exist).
        root /tmp/bloggingtemplate/;
    }
}
