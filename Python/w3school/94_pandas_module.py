# pandas — мощная библиотека для анализа и обработки данных. Используется для работы с таблицами (DataFrame), структурированными данными, CSV-файлами, базами данных и временными рядами.
# pip install pandas

import pandas as pd

# Выводим список всех доступных атрибутов и методов для pandas метода
print(dir(pd))

# Создаем Series из списка чисел
# Series — это одномерная структура данных с индексами
s = pd.Series([1, 3, 5, 6, 8])
print(s)

# Создание DataFrame из словаря
data = {
    "Имя": ["Аня", "Борис", "Вика"],
    "Возраст": [25, 30, 22],
    "Город": ["Берлин", "Париж", "Будапешт"],
}
df = pd.DataFrame(data)  # Создаем таблицу (DataFrame)
print(df)  # Выводим таблицу

# Вычисляем среднее значение для каждого числового столбца
print("Среднее значение: ", df.mean(numeric_only=True))

# Можно с помощью параметра columns — указать имена столбцов, с помощью параметра index - можно задать пользовательские индексы . Это удобно для структурирования таблицы с заголовками.
df_header = pd.DataFrame(
    [["Аня", 25, "Берлин"], ["Борис", 30, "Париж"], ["Вика", 22, "Будапешт"]],
    columns=["Имя", "Возраст", "Город"],
    index=["Пользователь 1", "Пользователь 2", "Пользователь 3"],
)
print(df_header)

# Чтение CSV-файла
# df = pd.read_csv('data.csv')  # Загружаем данные из CSV-файла

# Фильтрация данных: выбрать людей старше 23 лет
older_than_23 = df[df["Возраст"] > 23]
print(older_than_23)

# Добавление нового столбца
df["Возраст через 5 лет"] = (
    df["Возраст"] + 5
)  # Добавляем столбец с возрастом через 5 лет
print(df)

# Группировка данных (например, по возрасту)
grouped = df.groupby(
    "Возраст"
).count()  # Группируем по возрасту и считаем количество записей
print(grouped)
